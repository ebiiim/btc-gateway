// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

const (
	ApiKeyScopes = "ApiKey.Scopes"
)

// Anchor defines model for Anchor.
type Anchor struct {

	// BBc-1 domain ID in hexadecimal string.
	Bbc1dom string `json:"bbc1dom"`

	// BBc-1 transaction ID in hexadecimal string.
	Bbc1tx string `json:"bbc1tx"`

	// Target Bitcoin network. `Mainnet` `Testnet3` `Testnet4`(unsupported)
	Chain string `json:"chain"`

	// Timestamp embedded in the Anchor.
	Time int `json:"time"`

	// Anchor version. `1` `255`(test use only)
	Version int `json:"version"`
}

// AnchorRecord defines model for AnchorRecord.
type AnchorRecord struct {
	Anchor Anchor `json:"anchor"`

	// BBc-1 domain name that is not embedded in the Bitcoin transaction.
	Bbc1name *string `json:"bbc1name,omitempty"`

	// Bitcoin transaction ID transaction ID in hexadecimal string.
	Btctx string `json:"btctx"`

	// Comfirmations of the Bitcoin transaction.
	Confirmations int `json:"confirmations"`

	// Arbitrary string that is not embedded in the Bitcoin transaction.
	Note *string `json:"note,omitempty"`

	// Timestamp in Bitcoin block chain.
	Time int `json:"time"`
}

// Error defines model for Error.
type Error struct {

	// Error code with prefix `btcgw::`.
	Error string `json:"error"`

	// Message to the user.
	ErrorDescription *string `json:"error_description,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the anchor specified by BBc-1 domain ID and BBc-1 transaction ID.
	// (GET /domains/{dom}/transactions/{tx})
	GetDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request, dom string, tx string)
	// Request to update the status of the anchor specified by BBc-1 domain ID and BBc-1 transaction ID.
	// (PATCH /domains/{dom}/transactions/{tx})
	PatchDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request, dom string, tx string)
	// Register an anchor with specified BBc-1 domain ID and BBc-1 transaction ID.
	// (POST /domains/{dom}/transactions/{tx})
	PostDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request, dom string, tx string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetDomainsDomTransactionsTx operation middleware
func (siw *ServerInterfaceWrapper) GetDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dom" -------------
	var dom string

	err = runtime.BindStyledParameter("simple", false, "dom", chi.URLParam(r, "dom"), &dom)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dom: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tx" -------------
	var tx string

	err = runtime.BindStyledParameter("simple", false, "tx", chi.URLParam(r, "tx"), &tx)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tx: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDomainsDomTransactionsTx(w, r, dom, tx)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchDomainsDomTransactionsTx operation middleware
func (siw *ServerInterfaceWrapper) PatchDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dom" -------------
	var dom string

	err = runtime.BindStyledParameter("simple", false, "dom", chi.URLParam(r, "dom"), &dom)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dom: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tx" -------------
	var tx string

	err = runtime.BindStyledParameter("simple", false, "tx", chi.URLParam(r, "tx"), &tx)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tx: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchDomainsDomTransactionsTx(w, r, dom, tx)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostDomainsDomTransactionsTx operation middleware
func (siw *ServerInterfaceWrapper) PostDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dom" -------------
	var dom string

	err = runtime.BindStyledParameter("simple", false, "dom", chi.URLParam(r, "dom"), &dom)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dom: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tx" -------------
	var tx string

	err = runtime.BindStyledParameter("simple", false, "tx", chi.URLParam(r, "tx"), &tx)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tx: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, ApiKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDomainsDomTransactionsTx(w, r, dom, tx)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/domains/{dom}/transactions/{tx}", wrapper.GetDomainsDomTransactionsTx)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/domains/{dom}/transactions/{tx}", wrapper.PatchDomainsDomTransactionsTx)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/domains/{dom}/transactions/{tx}", wrapper.PostDomainsDomTransactionsTx)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY62/bthf9Vwj+fh86wLUlx+9v7loUQVEgaLN1QxHEFHllsZVIjbxK7AX+3wdSD1uR",
	"umZ9AFsRf7LExz28POfwUneU6yzXChRaurqjBmyulQX/8ItiBSbayD9BvDBGG/dSgOVG5ii1oiu6vjgn",
	"H2FPpCWZtFaqLdGGSHXDUimGdEATYAKMn+7du3fX6wITUCg5Q3DvLE8gY+4f7nOgK2rRSLWlB/cbVM1+",
	"9FrxpESQG52DQVmCjCIeCp11oT17xp+GROiMSUXOnxOpSAI7JoDLjKWkDOQgwo5leeqCT6az+WLJIh5A",
	"HITjs8l0FvhnAXEQ+GfXHvhn1x5U/QUE7pkO7i9j4PHh7lPw0DBlGXfvHoixhiiCGuI8qCGGQQ0xCmqI",
	"02DeLME992HkCZOqC/GSmS0geSaRa6mIArzV5uOQbF4zqRTghmwuwaICPDv+nWyeFMoWea4Ngviphb0a",
	"1wcBZQY9CGQGFlmWE8giEAKESxEmQEo6tFITzsLxZLKcjRfN/FIhbMG4ADdgrJ+0Q2E/E6nah2QTbshm",
	"PJ1uniBYJIUFolW6b60k7EY4DKiBPwppQNDV+yZcndxqhYOGrw0zrpq5dPQBODqwJaY3wLURXcqzRgr/",
	"NxDTFf3f6KjiUaWZUSWYioKK9eW3pRHXhWDC0KlZaezkvCbCCWnb3Ez0Fq612fbqAHmvDLpzOiH8c13M",
	"luMFhHw2mS9EGE+nIEI2FYsZhCwaT2azJQsn8Xw+jxbzZRRF4ymfT2bTydkiDKJ4Gc56daFVLE3GHAzb",
	"xf6zzo7NRMcPStJifNZHT6WxZ3/WJpJomNlXS/7K7YE01eRWm1R8iQSlakJEqeYfiWd2nwSX4eyzAqlI",
	"XBOj0Uc7533iaI6itiqg/4TyvQnXAsitxITkBmK5I5sI+fZ2tdq0U1S9xd210ngd60L1psrHum4Fuh/3",
	"NVjLtkBQ+80pLLTdil6eUNxtpw827Ea7l7dymS5PAnrS4w5N4IWRuH/rjKDMzTqXr2Dv/jmfrw5lOqCl",
	"K9Dfnq4vzp++evH7MTorR/hTWKpYu7FcK2Qc6eruMKCp5KCsJ0w1S8kh9IujJ4brG3QOiuWSrujZMBgG",
	"dEBzhokHNyr9x47uhM4OoxP62tEd7g6uzxZcWDeL8cw4F3RFXwI+L4c+19lJOu3lzs9vWAboi4/393fn",
	"LWCpmYcWCT5vDvIxa6WLH/cGTQGDk4rme9YVh8Hfr+ih/tmzLC/Gh6zq21cih6tBuwIdB0FNPFCeASzP",
	"0z33HBh9sKXwjuA+fx5WZ6rndTuBLwGtz2DpTMQWnIO1cZGme8KUIAawMMqelB/lZEPH70kvUvlFSEuD",
	"64F4XtbVxO2Oq00McJA3IAYNNqaIH11hOvv+mKryqXGwT2CZPig/DbkaO68duVCwy4EjiOvaAXtMmK4V",
	"OfYkvgdJmCWa88IYl6k8BWaBVF5GCuvhffXGIBjF0iriMVpPLly0IsuY2Zeka3EuBy5jCYJE+443OQ72",
	"qdufGWzrbK6+JV0dvL/ypGuaF+71o23+4LY56RYkbxs/+xcbVvipUM36Rt2vEo9W91+wujcVB1CTIhcM",
	"wevOIsOiuTx9DxvUtqd0vND2sXZ8rB2/Ve34BrbSYskv4sangGB/iBIy7J4kpw786Hgdx6uu39456ov3",
	"+yvHz1MzdIQB48ZWpue/Thyd76tsr8RhbmoDK0zq7+FXTd/m1r6uv8P0nnXri3NLfi1v8iSkh6vDXwEA",
	"AP//AW3JTDIYAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
