// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

const (
	ApiKeyScopes = "ApiKey.Scopes"
)

// Anchor defines model for Anchor.
type Anchor struct {

	// BBc-1 domain ID in hexadecimal string.
	Bbc1dom string `json:"bbc1dom"`

	// BBc-1 transaction ID in hexadecimal string.
	Bbc1tx string `json:"bbc1tx"`

	// Target Bitcoin network. `Mainnet` `Testnet3` `Testnet4`(unsupported)
	Chain string `json:"chain"`

	// Timestamp embedded in the Anchor.
	Time int `json:"time"`

	// Anchor version. `1` `255`(test use only)
	Version int `json:"version"`
}

// AnchorRecord defines model for AnchorRecord.
type AnchorRecord struct {
	Anchor Anchor `json:"anchor"`

	// BBc-1 domain name that is not embedded in the Bitcoin transaction.
	Bbc1name *string `json:"bbc1name,omitempty"`

	// Bitcoin transaction ID transaction ID in hexadecimal string.
	Btctx string `json:"btctx"`

	// Comfirmations of the Bitcoin transaction.
	Confirmations int `json:"confirmations"`

	// Arbitrary string that is not embedded in the Bitcoin transaction.
	Note *string `json:"note,omitempty"`

	// Timestamp in Bitcoin block chain.
	Time int `json:"time"`
}

// Error defines model for Error.
type Error struct {

	// Error code with prefix `btcgw::`.
	Error string `json:"error"`

	// Message to the user.
	ErrorDescription *string `json:"error_description,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the anchor specified by BBc-1 domain ID and BBc-1 transaction ID.
	// (GET /domains/{dom}/transactions/{tx})
	GetDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request, dom string, tx string)
	// Request to update the status of the anchor specified by BBc-1 domain ID and BBc-1 transaction ID.
	// (PATCH /domains/{dom}/transactions/{tx})
	PatchDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request, dom string, tx string)
	// Register an anchor with specified BBc-1 domain ID and BBc-1 transaction ID.
	// (POST /domains/{dom}/transactions/{tx})
	PostDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request, dom string, tx string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetDomainsDomTransactionsTx operation middleware
func (siw *ServerInterfaceWrapper) GetDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dom" -------------
	var dom string

	err = runtime.BindStyledParameter("simple", false, "dom", chi.URLParam(r, "dom"), &dom)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dom: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tx" -------------
	var tx string

	err = runtime.BindStyledParameter("simple", false, "tx", chi.URLParam(r, "tx"), &tx)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tx: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDomainsDomTransactionsTx(w, r, dom, tx)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchDomainsDomTransactionsTx operation middleware
func (siw *ServerInterfaceWrapper) PatchDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dom" -------------
	var dom string

	err = runtime.BindStyledParameter("simple", false, "dom", chi.URLParam(r, "dom"), &dom)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dom: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tx" -------------
	var tx string

	err = runtime.BindStyledParameter("simple", false, "tx", chi.URLParam(r, "tx"), &tx)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tx: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchDomainsDomTransactionsTx(w, r, dom, tx)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostDomainsDomTransactionsTx operation middleware
func (siw *ServerInterfaceWrapper) PostDomainsDomTransactionsTx(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dom" -------------
	var dom string

	err = runtime.BindStyledParameter("simple", false, "dom", chi.URLParam(r, "dom"), &dom)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dom: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tx" -------------
	var tx string

	err = runtime.BindStyledParameter("simple", false, "tx", chi.URLParam(r, "tx"), &tx)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tx: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, ApiKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDomainsDomTransactionsTx(w, r, dom, tx)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/domains/{dom}/transactions/{tx}", wrapper.GetDomainsDomTransactionsTx)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/domains/{dom}/transactions/{tx}", wrapper.PatchDomainsDomTransactionsTx)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/domains/{dom}/transactions/{tx}", wrapper.PostDomainsDomTransactionsTx)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYbW/bthb+KwTv/dALuLbk+P2b0wS9QVssSLN1QxHYFHlssZVIjTxK7AX+7wOpF9uR",
	"umZ9AbYi/mRKJM/Dw+d5eKh7ynWaaQUKLZ3dUwM208qCb/ysWI6xNvIPEOfGaOMeCrDcyAylVnRG55cX",
	"5CNsibQkldZKtSbaEKluWSJFl3ZoDEyA8dO9e/duMc8xBoWSMwT3zPIYUub+4TYDOqMWjVRrunO/Tvna",
	"j54rHhcIMqMzMCgLkFHEQ6HTJrTTU/48JEKnTCpycUakIjFsmAAuU5aQIpCDCBuWZokLPhiOxpMpi3gA",
	"qyDsnwyGo8C3BayCwLfd+8C33fug7C8gcG3aebiMjseHm0/BQ8OUZdw9eyTGCqIIKojjoIIYBhXEKKgg",
	"DoNxvQTXbsPIYyZVE+I1M2tAciqRa6mIArzT5mOXLN8wqRTgkiyvwaICPNn/HSyf5crmWaYNgvjfEfZy",
	"XBsElCm0IJApWGRpRiCNQAgQLkUYAynocJSacBT2B4PpqD+p55cKYQ3GBbgFY/2kDQr7mUj5vkuW4ZIs",
	"+8Ph8hmCRZJbIFol26OVhM0Iuw418HsuDQg6e1+Hq5JbrrBT87Vmxk09l44+AEcHtsB0BVwb0aQ8q6Xw",
	"XwMrOqP/6e1V3Cs10ysFU1JQsbb8HmnEdSEYM3RqVhobOa+IcEDaY27Geg0LbdatOkDeKoPmnE4If18X",
	"o2l/AiEfDcYTEa6GQxAhG4rJCEIW9Qej0ZSFg9V4PI4m42kURf0hHw9Gw8HJJAyi1TQctepCq5U0KXMw",
	"bBP7C53uXxO9elSSJv2TNnoqjS37MzeRRMPMtlzyV24PJIkmd9ok4kskKFUdIko0/0g8s9skOA1HnxVI",
	"SeKKGLU+jnPeJo76KDpWBbSfUL434VoAuZMYk8zASm7IMkK+vpvNlscpKp/iZqE0LlY6V62p8rEWR4Ee",
	"xn0D1rI1ENR+c3ILx25Frw8o7rbTB+s2oz3IW7FMlycBLelxhybw3EjcvnVGUORmnslXsHX/nM+XhzLt",
	"0MIV6K/P55cXz1+d/7aPzooR/hSWaqXdWK4VMo50dr/r0ERyUNYTppzl8vX8xfni/z+9Pju/KviEfqGF",
	"yZxevyAvGcId29IDN6ZBN+wGrrvOQLFM0hk96QbdgHZoxjD28HuFQ9nevdDprndAcNu7x83O9VmDA+Zm",
	"MZ47F4LO6EvAs2LomU4PEm6vN35+w1JAX568f7h/bwELVT22jPCZdZD3eS18fr97aHLoHNQ837Py2HX+",
	"ekWPddiWZXm5PmZV375W2d10jmvUfhBU1ATlGcCyLNlyz4HeB1tIcw/u8ydmeep65h8n8CWg9RksvIvY",
	"nHOwdpUnyZYwJYgBzI2yBwVKMVnX8XvQilR+EdLCAlsgXhSVN3G746oXAxzkLYhOjY0p4keXmE6+P6ay",
	"wKo97hNYho/KT02u2vArz84VbDLgCGJReWSLTdO5IvuexPcgMbNEc54b4zKVJcAskNLtSG49vK/eGASj",
	"WFJG3EdryYWLlqcpM9uCdEecy4DLlQRBom3DmxwH29TtTxW2djZX3aNudt5fedw0zUv3+Mk2f3DbHDRL",
	"lre1n/2DDSv8VKh6fb3md4snq/s3WN1VyQHUJM8EQ/C6s8gwr69X38MGtW0pHS+1faodn2rHb1U7XsFa",
	"Wiz4Rdz4BBDsD1FChs2T5NCBnxyv4XjlBd07R3U1f3/j+Hloho4wYNzY0vT894u9832V7RU4zG1lYLlJ",
	"6IxSh6HsW9/r59WXmtazbn55YckvxXWehHR3s/szAAD//2UZ6tpUGAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
