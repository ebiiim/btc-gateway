// Package apikey provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package apikey

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

// APIKey defines model for APIKey.
type APIKey struct {

	// API key (must be kept secret).
	Key string `json:"key"`
}

// BBc1Dom defines model for BBc1Dom.
type BBc1Dom struct {

	// BBc-1 domain ID in hexadecimal string.
	Bbc1dom string `json:"bbc1dom"`
}

// Error defines model for Error.
type Error struct {

	// Error code with prefix `btcgw::`.
	Error string `json:"error"`

	// Message to the user.
	ErrorDescription *string `json:"error_description,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest Error

// InternalServerError defines model for InternalServerError.
type InternalServerError Error

// PostApikeysCreateJSONBody defines parameters for PostApikeysCreate.
type PostApikeysCreateJSONBody BBc1Dom

// PostApikeysDeleteJSONBody defines parameters for PostApikeysDelete.
type PostApikeysDeleteJSONBody APIKey

// PostApikeysCreateJSONRequestBody defines body for PostApikeysCreate for application/json ContentType.
type PostApikeysCreateJSONRequestBody PostApikeysCreateJSONBody

// PostApikeysDeleteJSONRequestBody defines body for PostApikeysDelete for application/json ContentType.
type PostApikeysDeleteJSONRequestBody PostApikeysDeleteJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates an API Key associated with the BBc-1 domain specified by ID.
	// (POST /apikeys/create)
	PostApikeysCreate(w http.ResponseWriter, r *http.Request)
	// Deletes the specified API Key.
	// (POST /apikeys/delete)
	PostApikeysDelete(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostApikeysCreate operation middleware
func (siw *ServerInterfaceWrapper) PostApikeysCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApikeysCreate(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApikeysDelete operation middleware
func (siw *ServerInterfaceWrapper) PostApikeysDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApikeysDelete(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apikeys/create", wrapper.PostApikeysCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apikeys/delete", wrapper.PostApikeysDelete)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RV227jNhD9lQHbhxZQLDmxc/GbHQetkS0abPahRRF4KXIUcyORLEklFgz9e0FSvmjj",
	"IkEv2DeRHM6cOXN4tCFMVVpJlM6SyYYYtFpJi2Exo/wj/lmjdX7FlHQowyfVuhSMOqFk+sUq6fcsW2FF",
	"/df3BgsyId+l+9RpPLXpjTHKkLZtE8LRMiO0T0ImZCGfaSk4mFgQDDIUz8gTMOhqIy1QCeH2gLQJWUiH",
	"RtLyHs0zmpj1bYy4ppUuMXzGKyR37PFlMqklrjUyh3wZT5IYseyjnErYR0KIgBW1oBirjfFodYnUIngg",
	"lDmobYD7r8mJ3XYV99WOcLOrFkY4vVvcYuO/tFEajRNxtE9x86vu7hbwhA38UNXWQY7whNqBRWbQ/Tjw",
	"lGz5I5eXV1eU5jljnCMWRZYNh6enZ2ej0Xh8fn5xQRLiGu0jrTNCPgZcfrbCICeTPwKAh12Qyr8gc56p",
	"2YwN56p6jTjP2ZDHgz7q2YydDIGrigoJizkICStcU45MVLSEWL+PfjQ+v7i8ojnLsMiGp2ej8XkW1hyL",
	"LAtrf56FtT/PuniOmV+/2d0W7LEOd2Lt94fb7X53IRqY4ggvwq1AGyzEGj53uv3cb6zbdeulVG5ZqFry",
	"11iPSvvrur+gtfQRwSlwK4TaoumX+mSotJT5cJDKQSg2eJOZ7evyHR2hx6sXWW2Ea+69iiM3Uy06FQuP",
	"bYWUo08iaeUv/3YyvVuc3N78vq9O443wloQs1NYcKPPm0CakFAylDVbQZbn7ML2+Wf7864f5zUdPkhMu",
	"NBr1Nft0DT9Rhy+0IQl5RmMjT9lgOMh8uNIoqRZkQs4G2SAjCdHUrQL8lEq2UsamUaQ23XBVtanbM2jT",
	"jVu3EVlKtXjCxqbMIHUBoVbRgr1egqMtuAesrJvG2OsYGqlG62aKN/+ZZ2+fZNufpTM1ho2DP8Zplh0p",
	"2/yjsp11HbHD0K3Xnb9VokMLtmYMrS3qsmyASr5zRi/emCkY8SgCPFZ310h68N9rEzJ+z5Vj/6Mg5rqq",
	"qGm2oDFYtffZW2yAWquYoP5XEt62x9pzM6uRiUIgh7yBxTy8Lvpo/TvqcpCH9lAyHD0d75LMPIb+P5I5",
	"nN1bihm9Np/73TRBmUN3+aYTjIxFSe0n0w3ib2YT/Mwn9AcbUpuSTAhpH3bBO/uZBo8gbbLf6dK0D+1f",
	"AQAA//9EHDPWpwkAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
