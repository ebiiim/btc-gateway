// Package apikey provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package apikey

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

// APIKey defines model for APIKey.
type APIKey struct {

	// API key (must be kept secret).
	Key string `json:"key"`
}

// BBc1Dom defines model for BBc1Dom.
type BBc1Dom struct {

	// BBc-1 domain ID in hexadecimal string.
	Bbc1dom string `json:"bbc1dom"`
}

// Error defines model for Error.
type Error struct {

	// Error code with prefix `btcgw::`.
	Error string `json:"error"`

	// Message to the user.
	ErrorDescription *string `json:"error_description,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest Error

// InternalServerError defines model for InternalServerError.
type InternalServerError Error

// PostApikeysCreateJSONBody defines parameters for PostApikeysCreate.
type PostApikeysCreateJSONBody BBc1Dom

// PostApikeysDeleteJSONBody defines parameters for PostApikeysDelete.
type PostApikeysDeleteJSONBody APIKey

// PostApikeysCreateJSONRequestBody defines body for PostApikeysCreate for application/json ContentType.
type PostApikeysCreateJSONRequestBody PostApikeysCreateJSONBody

// PostApikeysDeleteJSONRequestBody defines body for PostApikeysDelete for application/json ContentType.
type PostApikeysDeleteJSONRequestBody PostApikeysDeleteJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates an API Key associated with the BBc-1 domain specified by ID.
	// (POST /apikeys/create)
	PostApikeysCreate(w http.ResponseWriter, r *http.Request)
	// Deletes the specified API Key.
	// (POST /apikeys/delete)
	PostApikeysDelete(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostApikeysCreate operation middleware
func (siw *ServerInterfaceWrapper) PostApikeysCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApikeysCreate(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApikeysDelete operation middleware
func (siw *ServerInterfaceWrapper) PostApikeysDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApikeysDelete(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apikeys/create", wrapper.PostApikeysCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apikeys/delete", wrapper.PostApikeysDelete)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWTW/jNhD9KwTbQwsoFp3Y+fDNToLWyBYNNntosQiyNDmOuZFIlqQSC4H+ezGk5I+N",
	"iqTbLvYmksOZ92YeZ/RMhSmt0aCDp5Nn6sBboz3ExYzL9/BXBT7gShgdQMdPbm2hBA/K6PyzNxr3vFhB",
	"yfHrRwdLOqE/5FvXeTr1+aVzxtGmaTIqwQunLDqhEzrXj7xQkrgUkDgQoB5BZsRBqJz2hGsSbw9ok9G5",
	"DuA0L27APYJLXl/HCGte2gLiZ7pCF0HcP00mlYa1BRFA3qWTLFnc7aOcarK1JNGCrLgnRojKOURrC+Ae",
	"CALhIpDKR7j/OTmJbRtxG60nN5tosYTT6/kV1PhlnbHggkqlfUibX7C7npMHqMlPZeUDWQB5ABuIB+Eg",
	"/DzAlHT5o6enZ2ecLxZCSAmwXDI2HB4eHh2NRuPx8fHJCc1oqC1a+uCUvo+4sLbKgaSTjxHA7cbILD6D",
	"CJip2UwML0z5EvFiIYYyHeyjns3EwZBIU3KlyfyCKE1WsOYShCp5QVL8ffSj8fHJ6RlfCAZLNjw8Go2P",
	"WVxLWDIW13jO4hrPWWsvgeH6VXYd2D6GG7Hu84Nue59dtCbCSCBPKqyIdbBUa/Kp1e2nfWLtbljfaRPu",
	"lqbS8iXWXml/Gfc38J7fAwmGhBWQyoPbD/XBce25QHOiTSAx2ODVzHSvCxn1pAfVC6JyKtQ3qOKUm6lV",
	"rYoVYlsBl4BONC/x8h8H0+v5wdXln9voPN2Ib0nppemaAxfYHJqMFkqA9rEVtF6u303PL+9+/f3dxeV7",
	"TFJQIRJN+pp9OCe/8ABPvKYZfQTnU57YYDhgaG4saG4VndCjARswmlHLwyrCz7kWK+N8nkTq82dpyiYP",
	"2wz6/DmsmygK7ngJAZynk49fJXWapSxh+G2OUI27lQiugt2+9G0fRz+RnQT8SzZh/UYyHRfJOi4nrOMy",
	"ZB2XBeu4jNnJhiuue8jcNhnNuVUPUPtcOOAhqsiaNCbxTcepM5coKuPDNNmeJ9OEG3yYGVn/b3O1a5vN",
	"/nvDxMSNnal+yFhP2PqrwrbjpWdkRbZYWLxVQABPfCUEeL+siqImXMvN9MIGkzzFYTlKAPvibojkO/8m",
	"TUbHb7nS988QG05VltzVHWiI4xRn4RXUhHtvhOI47mP/Rax7z9BbEGqpQJJFTeYXsQPye3y9tPVBb5td",
	"yUjAdLxJMhfJ9NtIZrd2rylm9HJA3GyqSYzbnQDftYIpY0lS28q0hfiH2sSZgw5Ty61cQSeUNrcb482I",
	"mMY+TrGfdTutm+a2+TsAAP//b15c50sLAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
