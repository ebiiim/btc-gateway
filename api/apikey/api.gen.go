// Package apikey provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package apikey

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

// APIKey defines model for APIKey.
type APIKey struct {

	// API key (must be kept secret).
	Key string `json:"key"`
}

// BBc1Domain defines model for BBc1Domain.
type BBc1Domain struct {

	// BBc-1 domain ID in hexadecimal string.
	Domain string `json:"domain"`
}

// Error defines model for Error.
type Error struct {

	// Error code with prefix `btcgw::`.
	Error string `json:"error"`

	// Message to the user.
	ErrorDescription *string `json:"error_description,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest Error

// InternalServerError defines model for InternalServerError.
type InternalServerError Error

// PostApikeysCreateJSONBody defines parameters for PostApikeysCreate.
type PostApikeysCreateJSONBody BBc1Domain

// PostApikeysDeleteJSONBody defines parameters for PostApikeysDelete.
type PostApikeysDeleteJSONBody APIKey

// PostApikeysCreateJSONRequestBody defines body for PostApikeysCreate for application/json ContentType.
type PostApikeysCreateJSONRequestBody PostApikeysCreateJSONBody

// PostApikeysDeleteJSONRequestBody defines body for PostApikeysDelete for application/json ContentType.
type PostApikeysDeleteJSONRequestBody PostApikeysDeleteJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates an API Key associated with the BBc-1 domain specified by ID.
	// (POST /apikeys/create)
	PostApikeysCreate(w http.ResponseWriter, r *http.Request)
	// Deletes the specified API Key.
	// (POST /apikeys/delete)
	PostApikeysDelete(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostApikeysCreate operation middleware
func (siw *ServerInterfaceWrapper) PostApikeysCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApikeysCreate(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApikeysDelete operation middleware
func (siw *ServerInterfaceWrapper) PostApikeysDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApikeysDelete(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apikeys/create", wrapper.PostApikeysCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apikeys/delete", wrapper.PostApikeysDelete)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW32/bNhD+VwhuDxugWHRi54ff7CTYjHRY0PRhQxGkNHmO2UgkR1KJhUD/+3CkJNuN",
	"i2Tdir2R1PHu++4+3umZClNao0EHTyfP1IG3RnuImxmX7+GvCnzAnTA6gI5Lbm2hBA/K6PyzNxrPvFhB",
	"yXH1o4MlndAf8o3rPH31+aVzxtGmaTIqwQunLDqhEzrXj7xQkrgUkDgQoB5BZsRBqJz2hGsSbw9ok9G5",
	"DuA0L27APYJLXl/HCGte2gLiMl2hiyDunyaTSsPagggg79KXLFnc7aKcarKxJNGCrLgnRojKOURrC+Ae",
	"CALhIpDKR7j/OjmJbRtxE21PbvposYTT6/kV1LiyzlhwQaXSPqTDL9hdz8kD1OSnsvKBLIA8gA3Eg3AQ",
	"fh5gSrr80dPTszPOFwshpARYLhkbDg8Pj45Go/H4+PjkhGY01BYtfXBK30dcWFvlQNLJxwjgtjcyi88g",
	"AmZqNhPDC1NypV+Clv35Lu7ZTBwMSfpK5hdEabKCNZcgVMkLkhDs4h+Nj09Oz/hCMFiy4eHRaHzM4l7C",
	"krG4x+8s7vE7a+0lMNy/yq/Fuo9ir9ZddtAd75KL1kQYCeRJhRWxDpZqTT61wv20y6s9Des7bcLd0lRa",
	"voS6V9tfxv0NvOf3QIIhYQWk8uB2Q31wXHsu0JxoE0gMNng1Md3zQkZ70oPyBVE5FeoblHHKzdSqVsZY",
	"f7oCLgGdaF7i5T8Optfzg6vLPzfReboRH5PSS9N1By6wOzQZLZQA7WMvaL1cv5ueX979+vu7i8v3mKSg",
	"QiSa5DX7cE5+4QGeeE0z+gjOpzyxwXDA0NxY0NwqOqFHAzZgNKOWh1WEn3MtVsb5PKnC589p0eRS3YMP",
	"eBAXTZQFd7yEAM7Tycdv0jrNUp4QwCZLrSS3yxFcBdvd6fs+kK9wicz/EZF4441EOh6SdTxOWMdjyDoe",
	"C9bxGLOTnifu9xC5bTKac6seoPa5cMBDlJE1aVDio45zZy5RVcaHabI9T6YJN/gwM7L+zybrVuNsdt8c",
	"5iYebI32Q8b2RK6/KXI7Y/bMrUgY+wPeKiCAJ74SArxfVkVRE65lP8KwySRPcWKOEsB9cXsi+dYPSpPR",
	"8Vuu7PtxiE2nKkvu6g40xJmKA/EKasK9N0JxnPmxByPWnYfoLQi1VCDJoibzi9gF+T2+X9r6oLfNtmok",
	"YDrepJqLZPp9VLNdu9cUM3o5JG76ahLjtqfA/1rBlLEkqU1l2kJ8pTZx7qDD1HQrV9AJpc1tb9yPiWns",
	"5RTbWXfSumlum78DAAD//6Rl4ttQCwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
