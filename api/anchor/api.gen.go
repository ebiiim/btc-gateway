// Package anchor provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package anchor

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

const (
	ApiKeyScopes = "ApiKey.Scopes"
)

// Anchor defines model for Anchor.
type Anchor struct {

	// Target Bitcoin network. `Mainnet` `Testnet3` `Testnet4`(unsupported)
	Chain string `json:"chain"`

	// BBc-1 digest in hexadecimal string.
	Digest string `json:"digest"`

	// BBc-1 domain ID in hexadecimal string.
	Domain string `json:"domain"`

	// Timestamp embedded in the Anchor.
	Time int `json:"time"`

	// Anchor version. `1` `255`(test use only)
	Version int `json:"version"`
}

// AnchorRecord defines model for AnchorRecord.
type AnchorRecord struct {
	Anchor Anchor `json:"anchor"`

	// BBc-1 domain name that is not embedded in the Bitcoin transaction.
	Bbc1name *string `json:"bbc1name,omitempty"`

	// Bitcoin transaction ID in hexadecimal string.
	Btctx string `json:"btctx"`

	// Comfirmations of the Bitcoin transaction.
	Confirmations int `json:"confirmations"`

	// Arbitrary string that is not embedded in the Bitcoin transaction.
	Note *string `json:"note,omitempty"`

	// Timestamp in Bitcoin block chain.
	Time int `json:"time"`
}

// Error defines model for Error.
type Error struct {

	// Error code with prefix `btcgw::`.
	Error string `json:"error"`

	// Message to the user.
	ErrorDescription *string `json:"error_description,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest Error

// ErrAnchorNotFound defines model for ErrAnchorNotFound.
type ErrAnchorNotFound Error

// InternalServerError defines model for InternalServerError.
type InternalServerError Error

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the anchor specified by BBc-1 domain ID and BBc-1 digest.
	// (GET /anchors/domains/{domain}/digests/{digest})
	GetAnchorsDomainsDomainDigestsDigest(w http.ResponseWriter, r *http.Request, domain string, digest string)
	// Requests to update the status of the anchor specified by BBc-1 domain ID and BBc-1 digest.
	// (PATCH /anchors/domains/{domain}/digests/{digest})
	PatchAnchorsDomainsDomainDigestsDigest(w http.ResponseWriter, r *http.Request, domain string, digest string)
	// Registers an anchor with specified BBc-1 domain ID and BBc-1 digest.
	// (POST /anchors/domains/{domain}/digests/{digest})
	PostAnchorsDomainsDomainDigestsDigest(w http.ResponseWriter, r *http.Request, domain string, digest string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAnchorsDomainsDomainDigestsDigest operation middleware
func (siw *ServerInterfaceWrapper) GetAnchorsDomainsDomainDigestsDigest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", chi.URLParam(r, "domain"), &domain)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameter("simple", false, "digest", chi.URLParam(r, "digest"), &digest)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter digest: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnchorsDomainsDomainDigestsDigest(w, r, domain, digest)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchAnchorsDomainsDomainDigestsDigest operation middleware
func (siw *ServerInterfaceWrapper) PatchAnchorsDomainsDomainDigestsDigest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", chi.URLParam(r, "domain"), &domain)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameter("simple", false, "digest", chi.URLParam(r, "digest"), &digest)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter digest: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAnchorsDomainsDomainDigestsDigest(w, r, domain, digest)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostAnchorsDomainsDomainDigestsDigest operation middleware
func (siw *ServerInterfaceWrapper) PostAnchorsDomainsDomainDigestsDigest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", chi.URLParam(r, "domain"), &domain)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameter("simple", false, "digest", chi.URLParam(r, "digest"), &digest)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter digest: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, ApiKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAnchorsDomainsDomainDigestsDigest(w, r, domain, digest)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/anchors/domains/{domain}/digests/{digest}", wrapper.GetAnchorsDomainsDomainDigestsDigest)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/anchors/domains/{domain}/digests/{digest}", wrapper.PatchAnchorsDomainsDomainDigestsDigest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/anchors/domains/{domain}/digests/{digest}", wrapper.PostAnchorsDomainsDomainDigestsDigest)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXXXPbthL9Kxjc+5A7w0ikrO83O/ZNPUlaj+POtJPxWCCwkpCQAAssbasZ/vcOAIoS",
	"LaZ2naTTPgnEx+7B4pzd1WfKdV5oBQotnX+mBmyhlQX/ccLEJfxWgkX3xbVCUH7IiiKTnKHUqv/RauXm",
	"LF9DztzovwaWdE7/09+Z7odV2z8zRhtaVVVEBVhuZOGM0Dk9V7csk4KY4JAY4CBvQUTEAJZGWcIU8ad7",
	"tIromTHHiq+1+VHj/3WpxPdHGPwRpZEsnccvIDtXCEax7D2YWzDB2uPY4J7lRQZ+GI7QFPnqbj4vFdwX",
	"wBHETViJwo6bh+jIbifxO8iaWaI5L41xcSwyYBaIA8I4ktJ6uF/9bOG2tcedt47YNN48uUI43agwugCD",
	"MpCOr5n0IWk7umJmBUhOJHItFVGAd9p86pHFOyaVAlyQxRVYVIBHu+Fw8aJUtiwKbRDE/1zotnGm9Tka",
	"UdwUbsKikWrlYiLkquZ8G8PJCX+ZkLBKpCJruGcCuMxZRsLpXsvFaDyZzljKRbyMk8HRcDSexP4blnES",
	"+2+3Hvtvtx7X++vvTmw674xPjc2vkvPTp8Db+ufx1v84bvzHgy2+uMETb+8Dsfvugocyh47HkzlYZHlB",
	"IE9BCBAOH66BBBa0cCXjZDAczsaDaWNfKoQVGOfgFoyVuiMAtTzr9R5ZJAuyGIxGixfonqu0QLTKNi0S",
	"JIceqoi6FCQNCDr/0LiLal7WN2zeoSHLdWNKpx+Bo8MaIF0C10YcEp01Avgz5dUyqSKapjxRrCu8rbd3",
	"WwiuGRJpfbJ6GPKthNAwZRl3Ntq8WOsV3Giz6nrfFDnedyA4tPlEEo5ngykkfDycTEWyHI1AJGwkpmNI",
	"WDoYjsczlgyXk8kknU5maZoORnwyHI+GR9MkTpezZNwFkmu1lCb3GdYegn2l890y0csnRWU6OOqio9LY",
	"8SDHJpVomNnUV/7K94As0+ROm0w8R3JSNS7STPNPxDO5S3KzZPyoIGrWbpnQ6KEd8y41NKWwLQPYTrfx",
	"+92EawHkTuKaFAaW8p4s6qq4aIeonsX7G6XxxpfnrlB1FM6Hft+BtWwFBLV/nNJCOzvRqz2KN71A79Db",
	"g7hta7e7UUd4XG0EXhqJm/dO+SE2x4V8Axs3cimfroEJcEZCGqC/vDy+OH/55uzXnXcWTvhKLdVSb1sP",
	"xl09qyKaSQ7KesLUVi7eHr86u/nhp7enZ5eBT+gvGrLKydUr8poh3LEN3cu+NO4lvdht1wUoVkg6p0e9",
	"uBfTiBYM1x5+P5DF9kNqsv3PYVD1Q9J0E35Qud0r8CXXccOz6FzQOX0NGDKgPQ02ws9pOB9+aNRuWwdx",
	"3NFxbZ7VDbZSeEf/8xrQeqKEqxJbcg7WLsss2xCmRNMH7YpdMOabr2FA2gWguVF/rwv3R44eP3LYHVcR",
	"HT3FWVf36slZ5jkzm64bF8DlUoIg6YY87EJcBPa7Jq8TtrJOEXVlu64cYwzLAcG4hWd1NjQKEnHc2wmk",
	"KdI7JaIpYb/r/Z7tUBX99Q7yCxfZEf3xi3z7trO69qrm60OBXrjpZ0h0eJh63zfa+deKo8ZiXfkoC8EQ",
	"vFQsMiybVuNbCkfbjqR5oe0/O2tewkpaDIiJO58Bgv07kmdySLufFStxrY38HYLhr+NCXcV9ItvW7w/X",
	"TkH7NHH3B+P/Htd08F3OjhPPIkQV0T4r5CfY2D43wHxvuj8pwEXaTXqoDnpIuaXJ6JxSB7O22vQHzT+Q",
	"3czFOfFdxnX1RwAAAP//7dyUR0ASAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
